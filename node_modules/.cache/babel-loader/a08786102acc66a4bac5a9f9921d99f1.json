{"ast":null,"code":"import _regeneratorRuntime from\"/Users/calvin/blockchain/wave-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/calvin/blockchain/wave-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ethers}from'ethers';import{CONTACT_ADDRESS}from'../util/constants';import contractABI from'../util/WavePortal.json';export var createWaveTxn=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(messageText){var _window,ethereum,provider,signer,contract,waveTxn;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_window=window,ethereum=_window.ethereum;provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();contract=new ethers.Contract(CONTACT_ADDRESS,contractABI.abi,signer);if(!(contract!==undefined)){_context.next=15;break;}_context.next=8;return contract.wave(messageText,{gasLimit:300000});case 8:waveTxn=_context.sent;console.log('Mining... ',waveTxn.hash);_context.next=12;return waveTxn.wait();case 12:console.log('Mined--',waveTxn.hash);_context.next=16;break;case 15:console.log('contract was undefined');case 16:_context.next=21;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 21:case\"end\":return _context.stop();}}},_callee,null,[[0,18]]);}));return function createWaveTxn(_x){return _ref.apply(this,arguments);};}();export var getWaveCount=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,provider,signer,contract,count,x;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_window2=window,ethereum=_window2.ethereum;provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();contract=new ethers.Contract(CONTACT_ADDRESS,contractABI.abi,signer);_context2.next=7;return contract.getTotalWaves();case 7:count=_context2.sent;console.log('returned total waves count: ',count);x=Number(count);console.log(x);return _context2.abrupt(\"return\",count);case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);return _context2.abrupt(\"return\",undefined);case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[0,14]]);}));return function getWaveCount(){return _ref2.apply(this,arguments);};}();export var getWaves=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,provider,signer,contract,waves,wavesCleaned;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_window3=window,ethereum=_window3.ethereum;_context3.prev=1;if(!window.ethereum){_context3.next=15;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();contract=new ethers.Contract(CONTACT_ADDRESS,contractABI.abi,signer);_context3.next=8;return contract.getAllWaves();case 8:waves=_context3.sent;wavesCleaned=[];waves.forEach(function(wave){var timestamp=new Date(wave.timestamp*1000).toString();var formattedTimeStamp=timestamp.split(' (')[0];wavesCleaned.push({address:wave.waver,timestamp:formattedTimeStamp,message:wave.message});});console.log(wavesCleaned);return _context3.abrupt(\"return\",wavesCleaned);case 15:console.log('Ethereum object does not exist!');return _context3.abrupt(\"return\",undefined);case 17:_context3.next=23;break;case 19:_context3.prev=19;_context3.t0=_context3[\"catch\"](1);console.log(_context3.t0);return _context3.abrupt(\"return\",undefined);case 23:case\"end\":return _context3.stop();}}},_callee3,null,[[1,19]]);}));return function getWaves(){return _ref3.apply(this,arguments);};}();export var listenForNewWaves=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(setWaves){var _window4,ethereum,provider,signer,contract;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:console.log('listening for new waves!');_window4=window,ethereum=_window4.ethereum;try{if(window.ethereum){provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();contract=new ethers.Contract(CONTACT_ADDRESS,contractABI.abi,signer);contract.on('NewWave',/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(from,timestamp,message){var waves;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log('NewWave',from,timestamp,message);_context4.next=3;return contract.getAllWaves();case 3:waves=_context4.sent;setWaves(waves);case 5:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x3,_x4,_x5){return _ref5.apply(this,arguments);};}());}else{console.log('Ethereum object does not exist!');}}catch(error){console.log(error);}case 3:case\"end\":return _context5.stop();}}},_callee5);}));return function listenForNewWaves(_x2){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/service/index.ts"],"names":["ethers","CONTACT_ADDRESS","contractABI","createWaveTxn","messageText","window","ethereum","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","undefined","wave","gasLimit","waveTxn","console","log","hash","wait","getWaveCount","getTotalWaves","count","x","Number","getWaves","getAllWaves","waves","wavesCleaned","forEach","timestamp","Date","toString","formattedTimeStamp","split","push","address","waver","message","listenForNewWaves","setWaves","on","from","error"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\nimport { Wave } from '../model/wave';\n\ndeclare let window: any;\n\nexport const createWaveTxn = async (messageText: string) => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const waveTxn = await contract.wave(messageText, { gasLimit: 300000 });\n      console.log('Mining... ', waveTxn.hash);\n\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n    } else {\n      console.log('contract was undefined');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getWaveCount = async (): Promise<number | undefined> => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    const count = await contract.getTotalWaves();\n    console.log('returned total waves count: ', count);\n\n    const x = Number(count);\n    console.log(x);\n    return count;\n\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const getWaves = async () => {\n  const { ethereum } = window;\n  try {\n    if (window.ethereum) { \n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n  \n      const waves = await contract.getAllWaves();\n      let wavesCleaned: Wave[] = [];\n\n      waves.forEach((wave: any) => {\n        const timestamp = new Date(wave.timestamp * 1000).toString()\n        const formattedTimeStamp = timestamp.split(' (')[0];\n\n        wavesCleaned.push({\n          address: wave.waver,\n          timestamp: formattedTimeStamp,\n          message: wave.message\n        });\n      });\n\n      console.log(wavesCleaned);\n      return wavesCleaned;\n    } else {\n      console.log('Ethereum object does not exist!');\n      return undefined;\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const listenForNewWaves = async (setWaves: React.Dispatch<React.SetStateAction<Wave[]>>) => {\n  console.log('listening for new waves!');\n  const { ethereum } = window;\n  try {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n      contract.on('NewWave', async (from, timestamp, message) => {\n        console.log('NewWave', from, timestamp, message);\n\n        const waves = await contract.getAllWaves();\n        setWaves(waves);\n      });\n    } else {\n      console.log('Ethereum object does not exist!'); \n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport { nanoid } from 'nanoid';\nimport React, { useState } from 'react';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../../util/constants';\nimport contractABI from '../../util/WavePortal.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialWaves = [];\nexport const MainBody = props => {\n  _s();\n\n  const [messageText, setMessageText] = useState('');\n  const [waves, setWaves] = useState(initialWaves);\n  const [totalWaves, setTotalWaves] = useState(0);\n\n  const handleTextChange = e => {\n    setMessageText(e.target.value);\n  };\n\n  const handleClick = async () => {\n    if (messageText === '') {\n      return;\n    }\n\n    ;\n    await createWaveTxn(messageText);\n  };\n\n  const createWaveTxn = async messageText => {\n    try {\n      const {\n        ethereum\n      } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n      if (contract !== undefined) {\n        const signerWalletAddress = await contract.signer.getAddress();\n        const newWave = {\n          id: nanoid(),\n          walletId: signerWalletAddress,\n          messageText,\n          timestamp: moment().utc().format()\n        };\n        let count = await contract.getTotalWaves();\n        console.log(\"retrieved total wave count\", count.toNumber());\n        const waveTxn = await contract.sendWave(newWave.timestamp, newWave.messageText);\n        console.log('Mining', waveTxn.hash);\n        await waveTxn.wait();\n        console.log('Mined--', waveTxn.hash);\n        count = await contract.getTotalWaves();\n        console.log('retrieved total wave count...', count.toNumber());\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getWaveCount = async () => {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n    const count = contract === null || contract === void 0 ? void 0 : contract.getTotalWaves();\n    console.log('returned total waves count: ', count);\n    setTotalWaves(count);\n  };\n\n  const renderHeader = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.headerContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: \"Waveportal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }, this);\n\n  const renderConnectWalletButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buttonContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.waveButton,\n      onClick: props.connectWallet,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonText,\n        children: \"connect wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }, this);\n\n  const renderTextFieldAndWaveButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textInputContainer,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.textInput,\n        type: \"text\",\n        value: messageText,\n        placeholder: \"leave a message!\",\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.waveButton,\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonText,\n          children: \"wave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 3\n  }, this);\n\n  const renderBody = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.bodyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textContainer,\n      children: \"Connect your wallet and leave a message!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }, this), !props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dataContainer,\n      children: [renderHeader(), renderBody(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.transactionsContainer,\n        children: waves.map(w => /*#__PURE__*/_jsxDEV(Transaction, {\n          wave: w\n        }, w.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 6\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MainBody, \"bDnE0jDxMoSCcoVExpbOCjFM/2o=\");\n\n_c = MainBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainBody\");","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx"],"names":["moment","nanoid","React","useState","Transaction","styles","ethers","CONTACT_ADDRESS","contractABI","initialWaves","MainBody","props","messageText","setMessageText","waves","setWaves","totalWaves","setTotalWaves","handleTextChange","e","target","value","handleClick","createWaveTxn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","undefined","signerWalletAddress","getAddress","newWave","id","walletId","timestamp","utc","format","count","getTotalWaves","console","log","toNumber","waveTxn","sendWave","hash","wait","error","getWaveCount","renderHeader","headerContainer","header","renderConnectWalletButton","buttonContainer","waveButton","connectWallet","buttonText","renderTextFieldAndWaveButton","textInputContainer","textInput","renderBody","bodyContainer","textContainer","account","container","dataContainer","transactionsContainer","map","w"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { nanoid } from 'nanoid';\nimport React, { useState, useEffect } from 'react';\nimport { Wave } from '../../model/wave';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\n\nimport { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../../util/constants';\nimport contractABI from '../../util/WavePortal.json';\n\nconst initialWaves: Wave[] = [];\n\ninterface Props {\n\taccount: any;\n\tconnectWallet: any;\n}\n\nexport const MainBody = (props: Props) => {\n\tconst [messageText, setMessageText] = useState<string>('');\n\tconst [waves, setWaves] = useState<Wave[]>(initialWaves);\n\tconst [totalWaves, setTotalWaves] = useState<number>(0);\n\n\tconst handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetMessageText(e.target.value);\n\t};\n\t\n\tconst handleClick = async () => {\n\t\tif (messageText === '') { return };\n\t\tawait createWaveTxn(messageText);\n\t};\n\n\tconst createWaveTxn = async(messageText: string) => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\t\n\t\t\tif (contract !== undefined) {\n\t\t\t\tconst signerWalletAddress = await contract.signer.getAddress();\n\t\t\n\t\t\t\tconst newWave: Wave = {\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\twalletId: signerWalletAddress,\n\t\t\t\t\tmessageText, \n\t\t\t\t\ttimestamp: moment().utc().format(),\n\t\t\t\t}\n\t\t\n\t\t\t\tlet count = await contract.getTotalWaves();\n\t\t\t\tconsole.log(\"retrieved total wave count\", count.toNumber());\n\t\t\n\t\t\t\tconst waveTxn = await contract.sendWave(newWave.timestamp, newWave.messageText);\n\t\t\t\tconsole.log('Mining', waveTxn.hash);\n\t\n\t\t\t\tawait waveTxn.wait();\n\t\t\t\tconsole.log('Mined--', waveTxn.hash);\n\t\t\n\t\t\t\tcount = await contract.getTotalWaves();\n\t\t\t\tconsole.log('retrieved total wave count...', count.toNumber());\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst getWaveCount = async () => {\n\t\tconst { ethereum }: any = window;\n\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\tconst signer = provider.getSigner();\n\t\tconst contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n    const count = contract?.getTotalWaves();\n    console.log('returned total waves count: ', count);\n    setTotalWaves(count);\n\t}\n\n\tconst renderHeader = () => (\n\t\t<div className={styles.headerContainer}>\n\t\t\t<div className={styles.header}>Waveportal</div>\n\t\t</div>\n\t);\n\n\tconst renderConnectWalletButton = () => (\n\t\t<div className={styles.buttonContainer}>\n\t\t\t<div className={styles.waveButton} onClick={props.connectWallet}>\n\t\t\t\t<div className={styles.buttonText}>connect wallet</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderTextFieldAndWaveButton = () => (\n\t\t<div>\n\t\t\t<div className={styles.textInputContainer}>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.textInput}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={messageText}\n\t\t\t\t\tplaceholder=\"leave a message!\"\n\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div className={styles.buttonContainer}>\n\t\t\t\t<div className={styles.waveButton} onClick={handleClick}>\n\t\t\t\t\t<div className={styles.buttonText}>wave</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderBody = () => (\n\t\t<div className={styles.bodyContainer}>\n\t\t\t<div className={styles.textContainer}>\n\t\t\t\tConnect your wallet and leave a message!\n\t\t\t</div>\n\t\t\t{!props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<div className={styles.dataContainer}>\n\t\t\t\t{renderHeader()}\n\t\t\t\t{renderBody()}\n\t\t\t\t<div className={styles.transactionsContainer}>\n\t\t\t\t\t{waves.map((w: Wave) => \n\t\t\t\t\t<Transaction key={w.id} wave={w}/>\n\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\nexport const createWaveTxn = async messageText => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const waveTxn = await contract.sendWave(messageText);\n      console.log('Mining... ', waveTxn.hash);\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n      return await getAllWaves();\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\nexport const getWaveCount = async () => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n    const count = await contract.getTotalWaves();\n    console.log('returned total waves count: ', count);\n    return count;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllWaves = async () => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n    const waves = await contract.getAllWaves();\n    let wavesCleaned = [];\n    waves.forEach(wave => {\n      wavesCleaned.push({\n        address: wave.waver,\n        timestamp: new Date(wave.timestamp * 1000),\n        message: wave.message\n      });\n    });\n    return wavesCleaned;\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/service/index.ts"],"names":["ethers","CONTACT_ADDRESS","contractABI","createWaveTxn","messageText","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","undefined","waveTxn","sendWave","console","log","hash","wait","getAllWaves","error","getWaveCount","count","getTotalWaves","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message"],"mappings":"AAAA,SAAoBA,MAApB,QAAkC,QAAlC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAOC,WAAP,IAA+B;AAC1D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAoBC,MAA1B;AACA,UAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;AACA,UAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,QAAX,CAAoBZ,eAApB,EAAqCC,WAAW,CAACY,GAAjD,EAAsDJ,MAAtD,CAAjB;;AAEA,QAAIE,QAAQ,KAAKG,SAAjB,EAA4B;AAC1B,YAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,QAAT,CAAkBb,WAAlB,CAAtB;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,OAAO,CAACI,IAAlC;AAEA,YAAMJ,OAAO,CAACK,IAAR,EAAN;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAO,CAACI,IAA/B;AAEA,aAAO,MAAME,WAAW,EAAxB;AACD;AACF,GAfD,CAeE,OAAOC,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,WAAOR,SAAP;AACD;AACF,CApBM;AAsBP,OAAO,MAAMS,YAAY,GAAG,YAAY;AACtC,MAAI;AACF,UAAM;AAAEnB,MAAAA;AAAF,QAAoBC,MAA1B;AACA,UAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;AACA,UAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,QAAX,CAAoBZ,eAApB,EAAqCC,WAAW,CAACY,GAAjD,EAAsDJ,MAAtD,CAAjB;AAEA,UAAMe,KAAK,GAAG,MAAMb,QAAQ,CAACc,aAAT,EAApB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CM,KAA5C;AACA,WAAOA,KAAP;AACD,GATD,CASE,OAAOF,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF,CAbM;AAeP,OAAO,MAAMD,WAAW,GAAG,YAAY;AACrC,MAAI;AACF,UAAM;AAAEjB,MAAAA;AAAF,QAAoBC,MAA1B;AACA,UAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;AACA,UAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,QAAX,CAAoBZ,eAApB,EAAqCC,WAAW,CAACY,GAAjD,EAAsDJ,MAAtD,CAAjB;AAEA,UAAMiB,KAAK,GAAG,MAAMf,QAAQ,CAACU,WAAT,EAApB;AACA,QAAIM,YAAoB,GAAG,EAA3B;AAEAD,IAAAA,KAAK,CAACE,OAAN,CAAeC,IAAD,IAAe;AAC3BF,MAAAA,YAAY,CAACG,IAAb,CAAkB;AAChBC,QAAAA,OAAO,EAAEF,IAAI,CAACG,KADE;AAEhBC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASL,IAAI,CAACI,SAAL,GAAiB,IAA1B,CAFK;AAGhBE,QAAAA,OAAO,EAAEN,IAAI,CAACM;AAHE,OAAlB;AAKD,KAND;AAOA,WAAOR,YAAP;AACD,GAjBD,CAiBE,OAAOL,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,WAAOR,SAAP;AACD;AACF,CAtBM","sourcesContent":["import { BigNumber, ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\nimport { Wave } from '../model/wave';\n\nexport const createWaveTxn = async (messageText: string) => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const waveTxn = await contract.sendWave(messageText);\n      console.log('Mining... ', waveTxn.hash);\n\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n\n      return await getAllWaves();\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const getWaveCount = async () => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    const count = await contract.getTotalWaves();\n    console.log('returned total waves count: ', count);\n    return count;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getAllWaves = async () => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    const waves = await contract.getAllWaves();\n    let wavesCleaned: Wave[] = [];\n\n    waves.forEach((wave: any) => {\n      wavesCleaned.push({\n        address: wave.waver,\n        timestamp: new Date(wave.timestamp * 1000),\n        message: wave.message\n      } as Wave)\n    });\n    return wavesCleaned;\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\n\nconst createWaveTxn = async messageText => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const waveTxn = await contract.wave(messageText, {\n        gasLimit: 300000\n      });\n      console.log('Mining... ', waveTxn.hash);\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getWaveCount = async () => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n    const count = await contract.getTotalWaves().toNumber();\n    console.log('returned total waves count: ', count);\n    return count;\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nconst getAllWaves = async () => {\n  const {\n    ethereum\n  } = window;\n\n  try {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n      const waves = await contract.getAllWaves();\n      let wavesCleaned = [];\n      waves.forEach(wave => {\n        wavesCleaned.push({\n          address: wave.waver,\n          timestamp: new Date(wave.timestamp * 1000),\n          message: wave.message\n        });\n      });\n      console.log(wavesCleaned);\n      return wavesCleaned;\n    } else {\n      console.log('Ethereum object does not exist!');\n      return undefined;\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const EthereumService = {\n  createWaveTxn,\n  getWaveCount,\n  getAllWaves\n};","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/service/index.ts"],"names":["ethers","CONTACT_ADDRESS","contractABI","createWaveTxn","messageText","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","undefined","waveTxn","wave","gasLimit","console","log","hash","wait","error","getWaveCount","count","getTotalWaves","toNumber","getAllWaves","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","message","EthereumService"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\nimport { Wave } from '../model/wave';\n\ndeclare let window: any;\n\nconst createWaveTxn = async (messageText: string) => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const waveTxn = await contract.wave(messageText, { gasLimit: 300000 });\n      console.log('Mining... ', waveTxn.hash);\n\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getWaveCount = async (): Promise<number | undefined> => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    const count = await contract.getTotalWaves().toNumber();\n    console.log('returned total waves count: ', count);\n    return count;\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nconst getAllWaves = async (): Promise<Wave[] | undefined> => {\n  const { ethereum } = window;\n  try {\n    if (window.ethereum) { \n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n  \n      const waves = await contract.getAllWaves();\n      let wavesCleaned: Wave[] = [];\n\n      waves.forEach((wave: any) => {\n        wavesCleaned.push({\n          address: wave.waver,\n          timestamp: new Date(wave.timestamp * 1000),\n          message: wave.message\n        } as Wave);\n      });\n\n      console.log(wavesCleaned);\n      return wavesCleaned;\n    } else {\n      console.log('Ethereum object does not exist!');\n      return undefined;\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const EthereumService = {\n  createWaveTxn,\n  getWaveCount,\n  getAllWaves,\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { createWaveTxn, getAllWaves, getWaveCount } from '../../service';\nimport { CONTACT_ADDRESS } from '../../util/constants';\nimport contractABI from '../../util/WavePortal.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialWaves = [];\nexport const MainBody = props => {\n  _s();\n\n  const [messageText, setMessageText] = useState('');\n  const [waves, setWaves] = useState(initialWaves);\n  const [totalWaves, setTotalWaves] = useState(0);\n\n  const handleTextChange = e => {\n    setMessageText(e.target.value);\n  };\n\n  const handleClick = async () => {\n    if (messageText === '') {\n      return;\n    }\n\n    ;\n    await createWaveTxn(messageText);\n    setMessageText('');\n  };\n\n  const listenForNewWaves = async () => {\n    console.log('listening for new waves!');\n    const {\n      ethereum\n    } = window;\n\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n        contract.on('NewWave', (from, timestamp, message) => {\n          console.log('NewWave', from, timestamp, message);\n          setWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log('Ethereum object does not exist!');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleGetAllWaves = async () => {\n    const wavesResponse = await getAllWaves();\n\n    if (wavesResponse !== undefined) {\n      setWaves(wavesResponse);\n    }\n  };\n\n  const handleGetWaveCount = async () => {\n    const count = await getWaveCount();\n\n    if (count !== undefined) {\n      setTotalWaves(count);\n    }\n\n    return;\n  };\n\n  useEffect(() => {\n    handleGetWaveCount();\n    handleGetAllWaves();\n  }, []);\n  useEffect(() => {\n    listenForNewWaves();\n  }, []);\n\n  const renderHeader = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.headerContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: \"Waveportal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 3\n  }, this);\n\n  const renderConnectWalletButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buttonContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.waveButton,\n      onClick: props.connectWallet,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonText,\n        children: \"connect wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n\n  const renderTextFieldAndWaveButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textInputContainer,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.textInput,\n        type: \"text\",\n        value: messageText,\n        placeholder: \"leave a message!\",\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.waveButton,\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonText,\n          children: \"wave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 3\n  }, this);\n\n  const renderBody = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.bodyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textContainer,\n      children: \"Connect your wallet and leave a message!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 4\n    }, this), !props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dataContainer,\n      children: [renderHeader(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.countContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [`So far ${totalWaves} waves have been sent!`, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this), renderBody(), waves.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.transactionsContainer,\n        children: waves.map(wave => /*#__PURE__*/_jsxDEV(Transaction, {\n          wave: wave\n        }, wave.address, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 10\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MainBody, \"UpwyA07bvm+YfcgnnRdm7ImffSM=\");\n\n_c = MainBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainBody\");","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx"],"names":["React","useState","useEffect","ethers","Transaction","styles","createWaveTxn","getAllWaves","getWaveCount","CONTACT_ADDRESS","contractABI","initialWaves","MainBody","props","messageText","setMessageText","waves","setWaves","totalWaves","setTotalWaves","handleTextChange","e","target","value","handleClick","listenForNewWaves","console","log","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","on","from","timestamp","message","prevState","address","Date","error","handleGetAllWaves","wavesResponse","undefined","handleGetWaveCount","count","renderHeader","headerContainer","header","renderConnectWalletButton","buttonContainer","waveButton","connectWallet","buttonText","renderTextFieldAndWaveButton","textInputContainer","textInput","renderBody","bodyContainer","textContainer","account","container","dataContainer","countContainer","length","transactionsContainer","map","wave"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { Wave } from '../../model/wave';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { createWaveTxn, getAllWaves, getWaveCount }  from '../../service';\nimport { CONTACT_ADDRESS } from '../../util/constants';\nimport contractABI from '../../util/WavePortal.json';\n\nconst initialWaves: Wave[] = [];\ndeclare let window: any;\n\ninterface Props {\n\taccount: any;\n\tconnectWallet: any;\n}\n\nexport const MainBody = (props: Props) => {\n\tconst [messageText, setMessageText] = useState<string>('');\n\tconst [waves, setWaves] = useState<Wave[]>(initialWaves);\n\tconst [totalWaves, setTotalWaves] = useState<number>(0);\n\n\tconst handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetMessageText(e.target.value);\n\t};\n\t\n\tconst handleClick = async () => {\n\t\tif (messageText === '') { return };\n\t\tawait createWaveTxn(messageText);\n\t\tsetMessageText('');\n\t};\n\n\tconst listenForNewWaves = async () => {\n\t\tconsole.log('listening for new waves!');\n\t\tconst { ethereum } = window;\n\t\ttry {\n\t\t\tif (window.ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\t\n\t\t\t\tcontract.on('NewWave', (from, timestamp, message) => {\n\t\t\t\t\tconsole.log('NewWave', from, timestamp, message);\n\t\t\t\t\t\n\t\t\t\t\tsetWaves(prevState => [...prevState, {\n\t\t\t\t\t\taddress: from,\n\t\t\t\t\t\ttimestamp: new Date(timestamp * 1000),\n\t\t\t\t\t\tmessage: message\n\t\t\t\t\t} as Wave]);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log('Ethereum object does not exist!'); \n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst handleGetAllWaves = async () => {\n\t\tconst wavesResponse = await getAllWaves();\n\t\tif (wavesResponse !== undefined) {\n\t\t\tsetWaves(wavesResponse);\n\t\t}\n\t};\n\n\tconst handleGetWaveCount = async () => {\n\t\tconst count = await getWaveCount();\n\t\tif (count !== undefined) {\n\t\t\tsetTotalWaves(count);\n\t\t}\n\t\treturn;\n\t};\n\n\n\tuseEffect(() => {\n\t\thandleGetWaveCount();\n\t\thandleGetAllWaves();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlistenForNewWaves();\n\t}, []);\n\n\tconst renderHeader = () => (\n\t\t<div className={styles.headerContainer}>\n\t\t\t<div className={styles.header}>Waveportal</div>\n\t\t</div>\n\t);\n\n\tconst renderConnectWalletButton = () => (\n\t\t<div className={styles.buttonContainer}>\n\t\t\t<div className={styles.waveButton} onClick={props.connectWallet}>\n\t\t\t\t<div className={styles.buttonText}>connect wallet</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderTextFieldAndWaveButton = () => (\n\t\t<div>\n\t\t\t<div className={styles.textInputContainer}>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.textInput}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={messageText}\n\t\t\t\t\tplaceholder=\"leave a message!\"\n\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className={styles.buttonContainer}>\n\t\t\t\t<div className={styles.waveButton} onClick={handleClick}>\n\t\t\t\t\t<div className={styles.buttonText}>wave</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderBody = () => (\n\t\t<div className={styles.bodyContainer}>\n\t\t\t<div className={styles.textContainer}>\n\t\t\t\tConnect your wallet and leave a message!\n\t\t\t</div>\n\t\t\t{!props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<div className={styles.dataContainer}>\n\t\t\t\t{renderHeader()}\n\t\t\t\t<div className={styles.countContainer}>\n\t\t\t\t\t<div>{`So far ${totalWaves} waves have been sent!`} </div>\n\t\t\t\t</div>\n\t\t\t\t{renderBody()}\n\t\t\t\t{waves.length !== 0 \n\t\t\t\t\t\t? <div className={styles.transactionsContainer}>\n\t\t\t\t\t\t\t\t{waves.map((wave: Wave) => \n\t\t\t\t\t\t\t\t\t<Transaction key={wave.address} wave={wave}/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
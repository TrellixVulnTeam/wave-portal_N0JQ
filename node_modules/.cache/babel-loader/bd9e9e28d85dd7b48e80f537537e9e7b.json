{"ast":null,"code":"var _jsxFileName = \"/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { createWaveTxn, getWaves, getWaveCount } from '../../service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialWaves = [];\nexport const MainBody = props => {\n  _s();\n\n  const [messageText, setMessageText] = useState('');\n  const [waves, setWaves] = useState(initialWaves);\n  const [totalWaves, setTotalWaves] = useState(0);\n\n  const handleTextChange = e => {\n    setMessageText(e.target.value);\n  };\n\n  const handleClick = async () => {\n    if (messageText === '') {\n      return;\n    }\n\n    ;\n    await createWaveTxn(messageText);\n    setMessageText('');\n  }; // const listenForNewWaves = async () => {\n  // \tconsole.log('listening for new waves!');\n  // \tconst { ethereum } = window;\n  // \ttry {\n  // \t\tif (window.ethereum) {\n  // \t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n  // \t\t\tconst signer = provider.getSigner();\n  // \t\t\tconst contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n  // \t\t\tcontract.on('NewWave', (from, timestamp, message) => {\n  // \t\t\t\tconsole.log('NewWave', from, timestamp, message);\n  // \t\t\t\tsetWaves(prevState => [...prevState, {\n  // \t\t\t\t\taddress: from,\n  // \t\t\t\t\ttimestamp: new Date(timestamp * 1000),\n  // \t\t\t\t\tmessage: message\n  // \t\t\t\t} as Wave]);\n  // \t\t\t});\n  // \t\t} else {\n  // \t\t\tconsole.log('Ethereum object does not exist!'); \n  // \t\t}\n  // \t} catch (error) {\n  // \t\tconsole.log(error);\n  // \t}\n  // };\n\n\n  const handleGetAllWaves = async () => {\n    const retrieved = await getWaves();\n    retrieved !== undefined ? setWaves(retrieved) : null;\n  };\n\n  const handleGetWaveCount = async () => {\n    const count = await getWaveCount();\n\n    if (count !== undefined) {\n      setTotalWaves(count);\n    }\n\n    return;\n  };\n\n  useEffect(() => {\n    handleGetWaveCount();\n    handleGetAllWaves();\n  }, []);\n\n  const renderHeader = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.headerContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: \"Waveportal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n\n  const renderConnectWalletButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buttonContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.waveButton,\n      onClick: props.connectWallet,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonText,\n        children: \"connect wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 3\n  }, this);\n\n  const renderTextFieldAndWaveButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textInputContainer,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.textInput,\n        type: \"text\",\n        value: messageText,\n        placeholder: \"leave a message!\",\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.waveButton,\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonText,\n          children: \"wave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 3\n  }, this);\n\n  const renderBody = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.bodyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textContainer,\n      children: \"Connect your wallet and leave a message!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }, this), !props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dataContainer,\n      children: [renderHeader(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.countContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [`So far ${totalWaves} waves have been sent!`, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }, this), renderBody(), waves.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.transactionsContainer,\n        children: waves.map(wave => /*#__PURE__*/_jsxDEV(Transaction, {\n          wave: wave\n        }, wave.address, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 10\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MainBody, \"8LOR2mNBBBYEm5Hw0yurQ2b2Wcs=\");\n\n_c = MainBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainBody\");","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx"],"names":["React","useState","useEffect","Transaction","styles","createWaveTxn","getWaves","getWaveCount","initialWaves","MainBody","props","messageText","setMessageText","waves","setWaves","totalWaves","setTotalWaves","handleTextChange","e","target","value","handleClick","handleGetAllWaves","retrieved","undefined","handleGetWaveCount","count","renderHeader","headerContainer","header","renderConnectWalletButton","buttonContainer","waveButton","connectWallet","buttonText","renderTextFieldAndWaveButton","textInputContainer","textInput","renderBody","bodyContainer","textContainer","account","container","dataContainer","countContainer","length","transactionsContainer","map","wave","address"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,YAAlC,QAAuD,eAAvD;;AAIA,MAAMC,YAAoB,GAAG,EAA7B;AAQA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAkB;AAAA;;AACzC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAS,EAAT,CAA9C;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAASO,YAAT,CAAlC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAS,CAAT,CAA5C;;AAEA,QAAMgB,gBAAgB,GAAIC,CAAD,IAA4C;AACpEN,IAAAA,cAAc,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACA,GAFD;;AAIA,QAAMC,WAAW,GAAG,YAAY;AAC/B,QAAIV,WAAW,KAAK,EAApB,EAAwB;AAAE;AAAQ;;AAAA;AAClC,UAAMN,aAAa,CAACM,WAAD,CAAnB;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACA,GAJD,CATyC,CAezC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMU,iBAAiB,GAAG,YAAY;AACrC,UAAMC,SAAS,GAAG,MAAMjB,QAAQ,EAAhC;AACAiB,IAAAA,SAAS,KAAKC,SAAd,GAA0BV,QAAQ,CAACS,SAAD,CAAlC,GAAgD,IAAhD;AACA,GAHD;;AAKA,QAAME,kBAAkB,GAAG,YAAY;AACtC,UAAMC,KAAK,GAAG,MAAMnB,YAAY,EAAhC;;AACA,QAAImB,KAAK,KAAKF,SAAd,EAAyB;AACxBR,MAAAA,aAAa,CAACU,KAAD,CAAb;AACA;;AACD;AACA,GAND;;AASAxB,EAAAA,SAAS,CAAC,MAAM;AACfuB,IAAAA,kBAAkB;AAClBH,IAAAA,iBAAiB;AACjB,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMK,YAAY,GAAG,mBACpB;AAAK,IAAA,SAAS,EAAEvB,MAAM,CAACwB,eAAvB;AAAA,2BACC;AAAK,MAAA,SAAS,EAAExB,MAAM,CAACyB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;;AAMA,QAAMC,yBAAyB,GAAG,mBACjC;AAAK,IAAA,SAAS,EAAE1B,MAAM,CAAC2B,eAAvB;AAAA,2BACC;AAAK,MAAA,SAAS,EAAE3B,MAAM,CAAC4B,UAAvB;AAAmC,MAAA,OAAO,EAAEtB,KAAK,CAACuB,aAAlD;AAAA,6BACC;AAAK,QAAA,SAAS,EAAE7B,MAAM,CAAC8B,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;;AAQA,QAAMC,4BAA4B,GAAG,mBACpC;AAAA,4BACC;AAAK,MAAA,SAAS,EAAE/B,MAAM,CAACgC,kBAAvB;AAAA,6BACC;AACC,QAAA,SAAS,EAAEhC,MAAM,CAACiC,SADnB;AAEC,QAAA,IAAI,EAAC,MAFN;AAGC,QAAA,KAAK,EAAE1B,WAHR;AAIC,QAAA,WAAW,EAAC,kBAJb;AAKC,QAAA,QAAQ,EAAEM;AALX;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAWC;AAAK,MAAA,SAAS,EAAEb,MAAM,CAAC2B,eAAvB;AAAA,6BACC;AAAK,QAAA,SAAS,EAAE3B,MAAM,CAAC4B,UAAvB;AAAmC,QAAA,OAAO,EAAEX,WAA5C;AAAA,+BACC;AAAK,UAAA,SAAS,EAAEjB,MAAM,CAAC8B,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAXD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;;AAoBA,QAAMI,UAAU,GAAG,mBAClB;AAAK,IAAA,SAAS,EAAElC,MAAM,CAACmC,aAAvB;AAAA,4BACC;AAAK,MAAA,SAAS,EAAEnC,MAAM,CAACoC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAIE,CAAC9B,KAAK,CAAC+B,OAAP,GAAiBX,yBAAyB,EAA1C,GAA+CK,4BAA4B,EAJ7E;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;;AASA,sBACC;AAAK,IAAA,SAAS,EAAE/B,MAAM,CAACsC,SAAvB;AAAA,2BACC;AAAK,MAAA,SAAS,EAAEtC,MAAM,CAACuC,aAAvB;AAAA,iBACEhB,YAAY,EADd,eAEC;AAAK,QAAA,SAAS,EAAEvB,MAAM,CAACwC,cAAvB;AAAA,+BACC;AAAA,qBAAO,UAAS7B,UAAW,wBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAFD,EAKEuB,UAAU,EALZ,EAMEzB,KAAK,CAACgC,MAAN,KAAiB,CAAjB,gBACG;AAAK,QAAA,SAAS,EAAEzC,MAAM,CAAC0C,qBAAvB;AAAA,kBACCjC,KAAK,CAACkC,GAAN,CAAWC,IAAD,iBACV,QAAC,WAAD;AAAgC,UAAA,IAAI,EAAEA;AAAtC,WAAkBA,IAAI,CAACC,OAAvB;AAAA;AAAA;AAAA;AAAA,gBADA;AADD;AAAA;AAAA;AAAA;AAAA,cADH,GAMG,IAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAkBA,CAzHM;;GAAMxC,Q;;KAAAA,Q","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { Wave } from '../../model/wave';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { createWaveTxn, getWaves, getWaveCount }  from '../../service';\nimport { CONTACT_ADDRESS } from '../../util/constants';\nimport contractABI from '../../util/WavePortal.json';\n\nconst initialWaves: Wave[] = [];\ndeclare let window: any;\n\ninterface Props {\n\taccount: any;\n\tconnectWallet: any;\n}\n\nexport const MainBody = (props: Props) => {\n\tconst [messageText, setMessageText] = useState<string>('');\n\tconst [waves, setWaves] = useState<Wave[]>(initialWaves);\n\tconst [totalWaves, setTotalWaves] = useState<number>(0);\n\n\tconst handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetMessageText(e.target.value);\n\t};\n\t\n\tconst handleClick = async () => {\n\t\tif (messageText === '') { return };\n\t\tawait createWaveTxn(messageText);\n\t\tsetMessageText('');\n\t};\n\n\t// const listenForNewWaves = async () => {\n\t// \tconsole.log('listening for new waves!');\n\t// \tconst { ethereum } = window;\n\t// \ttry {\n\t// \t\tif (window.ethereum) {\n\t// \t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t// \t\t\tconst signer = provider.getSigner();\n\t// \t\t\tconst contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\t\n\t// \t\t\tcontract.on('NewWave', (from, timestamp, message) => {\n\t// \t\t\t\tconsole.log('NewWave', from, timestamp, message);\n\t\t\t\t\t\n\t// \t\t\t\tsetWaves(prevState => [...prevState, {\n\t// \t\t\t\t\taddress: from,\n\t// \t\t\t\t\ttimestamp: new Date(timestamp * 1000),\n\t// \t\t\t\t\tmessage: message\n\t// \t\t\t\t} as Wave]);\n\t// \t\t\t});\n\t// \t\t} else {\n\t// \t\t\tconsole.log('Ethereum object does not exist!'); \n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(error);\n\t// \t}\n\t// };\n\n\tconst handleGetAllWaves = async () => {\n\t\tconst retrieved = await getWaves();\n\t\tretrieved !== undefined ? setWaves(retrieved) : null;\n\t};\n\n\tconst handleGetWaveCount = async () => {\n\t\tconst count = await getWaveCount();\n\t\tif (count !== undefined) {\n\t\t\tsetTotalWaves(count);\n\t\t}\n\t\treturn;\n\t};\n\n\n\tuseEffect(() => {\n\t\thandleGetWaveCount();\n\t\thandleGetAllWaves();\n\t}, []);\n\n\tconst renderHeader = () => (\n\t\t<div className={styles.headerContainer}>\n\t\t\t<div className={styles.header}>Waveportal</div>\n\t\t</div>\n\t);\n\n\tconst renderConnectWalletButton = () => (\n\t\t<div className={styles.buttonContainer}>\n\t\t\t<div className={styles.waveButton} onClick={props.connectWallet}>\n\t\t\t\t<div className={styles.buttonText}>connect wallet</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderTextFieldAndWaveButton = () => (\n\t\t<div>\n\t\t\t<div className={styles.textInputContainer}>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.textInput}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={messageText}\n\t\t\t\t\tplaceholder=\"leave a message!\"\n\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className={styles.buttonContainer}>\n\t\t\t\t<div className={styles.waveButton} onClick={handleClick}>\n\t\t\t\t\t<div className={styles.buttonText}>wave</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderBody = () => (\n\t\t<div className={styles.bodyContainer}>\n\t\t\t<div className={styles.textContainer}>\n\t\t\t\tConnect your wallet and leave a message!\n\t\t\t</div>\n\t\t\t{!props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<div className={styles.dataContainer}>\n\t\t\t\t{renderHeader()}\n\t\t\t\t<div className={styles.countContainer}>\n\t\t\t\t\t<div>{`So far ${totalWaves} waves have been sent!`} </div>\n\t\t\t\t</div>\n\t\t\t\t{renderBody()}\n\t\t\t\t{waves.length !== 0 \n\t\t\t\t\t\t? <div className={styles.transactionsContainer}>\n\t\t\t\t\t\t\t\t{waves.map((wave: Wave) => \n\t\t\t\t\t\t\t\t\t<Transaction key={wave.address} wave={wave}/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { BigNumber, ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../../util/constants';\nimport contractABI from '../../util/WavePortal.json';\nimport { createWaveTxn } from '../../service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialWaves = [];\nexport const MainBody = props => {\n  _s();\n\n  const [messageText, setMessageText] = useState('');\n  const [waves, setWaves] = useState(initialWaves);\n  const [totalWaves, setTotalWaves] = useState(0);\n\n  const handleTextChange = e => {\n    setMessageText(e.target.value);\n  };\n\n  const handleClick = async () => {\n    if (messageText === '') {\n      return;\n    }\n\n    ;\n    await createWaveTxn(messageText);\n  };\n\n  useEffect(() => {\n    getAllWaves();\n  }, []);\n\n  const getWaveCount = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n      const count = await contract.getTotalWaves();\n      console.log('returned total waves count: ', count);\n      setTotalWaves(count);\n      return count;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n      const numWaves = await getWaveCount();\n      let retrievedWaves = [];\n\n      for (let i = 0; i < numWaves; i++) {\n        const [txnIndex, utcTimeStamp, message, senderWalletAddress] = await contract.waves(i);\n        const wave = {\n          id: BigNumber.from(txnIndex).toString(),\n          walletId: senderWalletAddress,\n          messageText: message,\n          timestamp: utcTimeStamp\n        };\n        retrievedWaves.push(wave);\n      }\n\n      setWaves(retrievedWaves);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleGetWavesNum = async () => {\n    const count = await getWaveCount();\n  };\n\n  const renderHeader = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.headerContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: \"Waveportal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 3\n  }, this);\n\n  const renderConnectWalletButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buttonContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.waveButton,\n      onClick: props.connectWallet,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonText,\n        children: \"connect wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 3\n  }, this);\n\n  const renderTextFieldAndWaveButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textInputContainer,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.textInput,\n        type: \"text\",\n        value: messageText,\n        placeholder: \"leave a message!\",\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.waveButton,\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonText,\n          children: \"wave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 3\n  }, this);\n\n  const renderBody = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.bodyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textContainer,\n      children: \"Connect your wallet and leave a message!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 4\n    }, this), !props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dataContainer,\n      children: [renderHeader(), renderBody(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.transactionsContainer,\n        children: [waves.map(w => /*#__PURE__*/_jsxDEV(Transaction, {\n          wave: w\n        }, w.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 6\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGetWavesNum,\n          children: \"getNumWaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getAllWaves,\n          children: \"getAllWaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MainBody, \"8LOR2mNBBBYEm5Hw0yurQ2b2Wcs=\");\n\n_c = MainBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainBody\");","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx"],"names":["React","useState","useEffect","Transaction","styles","BigNumber","ethers","CONTACT_ADDRESS","contractABI","createWaveTxn","initialWaves","MainBody","props","messageText","setMessageText","waves","setWaves","totalWaves","setTotalWaves","handleTextChange","e","target","value","handleClick","getAllWaves","getWaveCount","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","count","getTotalWaves","console","log","error","numWaves","retrievedWaves","i","txnIndex","utcTimeStamp","message","senderWalletAddress","wave","id","from","toString","walletId","timestamp","push","handleGetWavesNum","renderHeader","headerContainer","header","renderConnectWalletButton","buttonContainer","waveButton","connectWallet","buttonText","renderTextFieldAndWaveButton","textInputContainer","textInput","renderBody","bodyContainer","textContainer","account","container","dataContainer","transactionsContainer","map","w"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { nanoid } from 'nanoid';\nimport React, { useState, useEffect } from 'react';\nimport { Wave } from '../../model/wave';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport Web3 from 'web3';\n\nimport { BigNumber, ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../../util/constants';\nimport contractABI from '../../util/WavePortal.json';\nimport { createWaveTxn } from '../../service';\n\nconst initialWaves: Wave[] = [];\n\ninterface Props {\n\taccount: any;\n\tconnectWallet: any;\n}\n\nexport const MainBody = (props: Props) => {\n\tconst [messageText, setMessageText] = useState<string>('');\n\tconst [waves, setWaves] = useState<Wave[]>(initialWaves);\n\tconst [totalWaves, setTotalWaves] = useState<number>(0);\n\n\tconst handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetMessageText(e.target.value);\n\t};\n\t\n\tconst handleClick = async () => {\n\t\tif (messageText === '') { return };\n\t\tawait createWaveTxn(messageText);\n\t};\n\n\tuseEffect(() => {\n\t\tgetAllWaves();\n\t}, []);\n\n\n\tconst getWaveCount = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n\t\t\tconst count = await contract.getTotalWaves();\n\t\t\tconsole.log('returned total waves count: ', count);\n\t\t\tsetTotalWaves(count);\n\t\t\treturn count;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst getAllWaves = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\t\t\tconst numWaves = await getWaveCount();\n\n\t\t\tlet retrievedWaves: Wave[] = []\n\n\t\t\tfor (let i = 0; i < numWaves; i++) {\n\t\t\t\tconst [ \n\t\t\t\t\ttxnIndex, \n\t\t\t\t\tutcTimeStamp, \n\t\t\t\t\tmessage,\n\t\t\t\t\tsenderWalletAddress\n\t\t\t\t] = await contract.waves(i);\n\n\t\t\t\tconst wave: Wave = {\n\t\t\t\t\tid: BigNumber.from(txnIndex).toString(),\n\t\t\t\t\twalletId: senderWalletAddress,\n\t\t\t\t\tmessageText: message,\n\t\t\t\t\ttimestamp: utcTimeStamp,\n\t\t\t\t}\n\n\t\t\t\tretrievedWaves.push(wave);\n\t\t\t}\n\t\t\tsetWaves(retrievedWaves);\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst handleGetWavesNum = async () => {\n\t\tconst count = await getWaveCount();\n\t}\n\n\tconst renderHeader = () => (\n\t\t<div className={styles.headerContainer}>\n\t\t\t<div className={styles.header}>Waveportal</div>\n\t\t</div>\n\t);\n\n\tconst renderConnectWalletButton = () => (\n\t\t<div className={styles.buttonContainer}>\n\t\t\t<div className={styles.waveButton} onClick={props.connectWallet}>\n\t\t\t\t<div className={styles.buttonText}>connect wallet</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderTextFieldAndWaveButton = () => (\n\t\t<div>\n\t\t\t<div className={styles.textInputContainer}>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.textInput}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={messageText}\n\t\t\t\t\tplaceholder=\"leave a message!\"\n\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div className={styles.buttonContainer}>\n\t\t\t\t<div className={styles.waveButton} onClick={handleClick}>\n\t\t\t\t\t<div className={styles.buttonText}>wave</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderBody = () => (\n\t\t<div className={styles.bodyContainer}>\n\t\t\t<div className={styles.textContainer}>\n\t\t\t\tConnect your wallet and leave a message!\n\t\t\t</div>\n\t\t\t{!props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<div className={styles.dataContainer}>\n\t\t\t\t{renderHeader()}\n\t\t\t\t{renderBody()}\n\t\t\t\t<div className={styles.transactionsContainer}>\n\t\t\t\t\t{waves.map((w: Wave) => \n\t\t\t\t\t<Transaction key={w.id} wave={w}/>\n\t\t\t\t)}\n\t\t\t\t<button onClick={handleGetWavesNum}>getNumWaves</button>\n\t\t\t\t<button onClick={getAllWaves}>getAllWaves</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
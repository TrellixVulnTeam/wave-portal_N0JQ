{"ast":null,"code":"var _jsxFileName = \"/Users/calvin/blockchain/wave-portal/src/components/app/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { MainBody } from '../mainbody';\nimport styles from './index.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkWalletConnection = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        setCurrentAccount(\"\");\n        return;\n      }\n\n      ;\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n      console.log('getaccounts');\n\n      if (accounts.length === 0) {\n        setCurrentAccount(\"\");\n        console.log(\"No authorized account found\");\n        return;\n      } else if (accounts.length > 1) {\n        setCurrentAccount(\"\");\n        console.log('more than one account found');\n        return;\n      }\n\n      const account = accounts[0];\n      setCurrentAccount(account);\n      console.log(\"authorized account: \", account);\n    } catch (error) {\n      setCurrentAccount(\"\");\n      console.log(error);\n    }\n\n    ;\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        setCurrentAccount(\"\");\n        alert(\"Get Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n      console.log(\"connected: \", accounts[0]);\n    } catch (error) {\n      setCurrentAccount(\"\");\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkWalletConnection();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(MainBody, {\n      account: currentAccount,\n      connectWallet: connectWallet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/components/app/index.tsx"],"names":["React","useState","useEffect","MainBody","styles","App","currentAccount","setCurrentAccount","checkWalletConnection","ethereum","window","accounts","request","method","console","log","length","account","error","connectWallet","alert","container"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAS,EAAT,CAApD;;AAEA,QAAMO,qBAAqB,GAAG,YAAY;AACzC,QAAI;AACH,YAAM;AAAEC,QAAAA;AAAF,UAAoBC,MAA1B;;AAEA,UAAI,CAACD,QAAL,EAAe;AACdF,QAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACA;AACA;;AAAA;AAED,YAAMI,QAAQ,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAjB,CAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,CAAxB,EAA2B;AAC1BT,QAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACA,OAJD,MAIO,IAAIJ,QAAQ,CAACK,MAAT,GAAkB,CAAtB,EAAyB;AAC/BT,QAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACA;;AAED,YAAME,OAAO,GAAGN,QAAQ,CAAC,CAAD,CAAxB;AACAJ,MAAAA,iBAAiB,CAACU,OAAD,CAAjB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,OAApC;AAEA,KAxBD,CAwBE,OAAOC,KAAP,EAAc;AACfX,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA;;AAAA;AACD,GA7BD;;AA+BA,QAAMC,aAAa,GAAG,YAAY;AACjC,QAAI;AACH,YAAM;AAAEV,QAAAA;AAAF,UAAoBC,MAA1B;;AACA,UAAI,CAACD,QAAL,EAAe;AACdF,QAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAa,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACA;;AAED,YAAMT,QAAQ,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AAEAN,MAAAA,iBAAiB,CAACI,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,QAAQ,CAAC,CAAD,CAAnC;AACA,KAZD,CAYE,OAAOO,KAAP,EAAc;AACfX,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA;AACD,GAjBD;;AAmBAhB,EAAAA,SAAS,CAAC,MAAM;AACfM,IAAAA,qBAAqB;AACrB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACC;AAAK,IAAA,SAAS,EAAEJ,MAAM,CAACiB,SAAvB;AAAA,2BACC,QAAC,QAAD;AAAU,MAAA,OAAO,EAAEf,cAAnB;AAAmC,MAAA,aAAa,EAAEa;AAAlD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CA9DD;;GAAMd,G;;KAAAA,G;AAgEN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MainBody } from '../mainbody';\nimport styles from './index.module.scss';\nimport { ethers } from 'ethers';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState<string>(\"\")\n\n\tconst checkWalletConnection = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\treturn;\n\t\t\t};\n\t\n\t\t\tconst accounts = await ethereum.request({method: 'eth_accounts' });\n\t\t\tconsole.log('getaccounts');\n\t\t\tif (accounts.length === 0) { \n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t\treturn;\n\t\t\t} else if (accounts.length > 1) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\tconsole.log('more than one account found');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst account = accounts[0];\n\t\t\tsetCurrentAccount(account);\n\t\t\tconsole.log(\"authorized account: \", account);\n\n\t\t} catch (error) {\n\t\t\tsetCurrentAccount(\"\");\n\t\t\tconsole.log(error);\n\t\t};\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\t\t\tif (!ethereum) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\talert(\"Get Metamask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t\tconsole.log(\"connected: \", accounts[0]);\n\t\t} catch (error) {\n\t\t\tsetCurrentAccount(\"\");\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tcheckWalletConnection();\n\t}, []);\n\n\treturn(\n\t\t<div className={styles.container}>\n\t\t\t<MainBody account={currentAccount} connectWallet={connectWallet}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
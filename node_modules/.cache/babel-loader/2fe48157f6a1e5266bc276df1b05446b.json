{"ast":null,"code":"var _jsxFileName = \"/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { EthereumService } from '../../service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialWaves = [];\nexport const MainBody = props => {\n  _s();\n\n  const [messageText, setMessageText] = useState('');\n  const [waves, setWaves] = useState(initialWaves);\n  const [totalWaves, setTotalWaves] = useState(0);\n\n  const handleTextChange = e => {\n    setMessageText(e.target.value);\n  };\n\n  const handleClick = async () => {\n    if (messageText === '') {\n      return;\n    }\n\n    ;\n    const waves = await EthereumService.createWaveTxn(messageText);\n\n    if (waves !== undefined) {\n      setWaves(waves);\n      setMessageText('');\n    }\n  };\n\n  const handleListenForNewWaves = async () => {\n    await EthereumService.listenForNewWaves(waves, setWaves);\n  };\n\n  const handleGetAllWaves = async () => {\n    if (waves.length !== 0) {\n      await EthereumService.getAllWaves(setWaves);\n    }\n  };\n\n  const handleGetWaveCount = async () => {\n    await EthereumService.getWaveCount(setTotalWaves);\n    console.log(totalWaves);\n  };\n\n  useEffect(() => {\n    handleGetWaveCount();\n    handleGetAllWaves();\n  }, []);\n  useEffect(() => {\n    handleListenForNewWaves();\n  }, []);\n\n  const renderHeader = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.headerContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: \"Waveportal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n\n  const renderConnectWalletButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buttonContainer,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.waveButton,\n      onClick: props.connectWallet,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonText,\n        children: \"connect wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n\n  const renderTextFieldAndWaveButton = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textInputContainer,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.textInput,\n        type: \"text\",\n        value: messageText,\n        placeholder: \"leave a message!\",\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.waveButton,\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonText,\n          children: \"wave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 3\n  }, this);\n\n  const renderBody = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.bodyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textContainer,\n      children: \"Connect your wallet and leave a message!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this), !props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dataContainer,\n      children: [renderHeader(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.countContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [`So far ${totalWaves} waves have been sent!`, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this), renderBody(), waves.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.transactionsContainer,\n        children: waves.map(wave => /*#__PURE__*/_jsxDEV(Transaction, {\n          wave: wave\n        }, wave.address, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 10\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MainBody, \"UpwyA07bvm+YfcgnnRdm7ImffSM=\");\n\n_c = MainBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainBody\");","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/components/mainbody/index.tsx"],"names":["React","useState","useEffect","Transaction","styles","EthereumService","initialWaves","MainBody","props","messageText","setMessageText","waves","setWaves","totalWaves","setTotalWaves","handleTextChange","e","target","value","handleClick","createWaveTxn","undefined","handleListenForNewWaves","listenForNewWaves","handleGetAllWaves","length","getAllWaves","handleGetWaveCount","getWaveCount","console","log","renderHeader","headerContainer","header","renderConnectWalletButton","buttonContainer","waveButton","connectWallet","buttonText","renderTextFieldAndWaveButton","textInputContainer","textInput","renderBody","bodyContainer","textContainer","account","container","dataContainer","countContainer","transactionsContainer","map","wave","address"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Wave } from '../../model/wave';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { EthereumService }  from '../../service';\n\nconst initialWaves: Wave[] = [];\n\ninterface Props {\n\taccount: any;\n\tconnectWallet: any;\n}\n\nexport const MainBody = (props: Props) => {\n\tconst [messageText, setMessageText] = useState<string>('');\n\tconst [waves, setWaves] = useState<Wave[]>(initialWaves);\n\tconst [totalWaves, setTotalWaves] = useState<number>(0);\n\n\tconst handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetMessageText(e.target.value);\n\t};\n\t\n\tconst handleClick = async () => {\n\t\tif (messageText === '') { return };\n\t\tconst waves = await EthereumService.createWaveTxn(messageText);\n\t\tif (waves !== undefined) {\n\t\t\tsetWaves(waves);\n\t\t\tsetMessageText('');\n\t\t}\n\t};\n\n\tconst handleListenForNewWaves = async () => {\n\t\tawait EthereumService.listenForNewWaves(waves, setWaves);\n\t};\n\n\tconst handleGetAllWaves = async () => {\n\t\tif (waves.length !== 0) {\n\t\t\tawait EthereumService.getAllWaves(setWaves);\n\t\t}\n\t};\n\n\tconst handleGetWaveCount = async () => {\n\t\tawait EthereumService.getWaveCount(setTotalWaves);\n\t\tconsole.log(totalWaves);\n\t};\n\n\n\tuseEffect(() => {\n\t\thandleGetWaveCount();\n\t\thandleGetAllWaves();\n\t}, []);\n\n\tuseEffect(() => {\n\t\thandleListenForNewWaves();\n\t}, []);\n\n\tconst renderHeader = () => (\n\t\t<div className={styles.headerContainer}>\n\t\t\t<div className={styles.header}>Waveportal</div>\n\t\t</div>\n\t);\n\n\tconst renderConnectWalletButton = () => (\n\t\t<div className={styles.buttonContainer}>\n\t\t\t<div className={styles.waveButton} onClick={props.connectWallet}>\n\t\t\t\t<div className={styles.buttonText}>connect wallet</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderTextFieldAndWaveButton = () => (\n\t\t<div>\n\t\t\t<div className={styles.textInputContainer}>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.textInput}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={messageText}\n\t\t\t\t\tplaceholder=\"leave a message!\"\n\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className={styles.buttonContainer}>\n\t\t\t\t<div className={styles.waveButton} onClick={handleClick}>\n\t\t\t\t\t<div className={styles.buttonText}>wave</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderBody = () => (\n\t\t<div className={styles.bodyContainer}>\n\t\t\t<div className={styles.textContainer}>\n\t\t\t\tConnect your wallet and leave a message!\n\t\t\t</div>\n\t\t\t{!props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<div className={styles.dataContainer}>\n\t\t\t\t{renderHeader()}\n\t\t\t\t<div className={styles.countContainer}>\n\t\t\t\t\t<div>{`So far ${totalWaves} waves have been sent!`} </div>\n\t\t\t\t</div>\n\t\t\t\t{renderBody()}\n\t\t\t\t{waves.length !== 0 \n\t\t\t\t\t\t? <div className={styles.transactionsContainer}>\n\t\t\t\t\t\t\t\t{waves.map((wave: Wave) => \n\t\t\t\t\t\t\t\t\t<Transaction key={wave.address} wave={wave}/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}
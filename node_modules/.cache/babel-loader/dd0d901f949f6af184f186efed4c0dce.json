{"ast":null,"code":"var _jsxFileName = \"/Users/calvin/blockchain/wave-portal/src/components/app/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { MainBody } from '../mainbody';\nimport styles from './index.module.scss';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkWalletConnection = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        setCurrentAccount(\"\");\n        return;\n      }\n\n      ;\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length === 0) {\n        setCurrentAccount(\"\");\n        console.log(\"No authorized account found or found more than one\");\n        return;\n      }\n\n      ;\n      const account = accounts[0];\n      setCurrentAccount(account);\n      console.log(\"authorized account: \", account);\n    } catch (error) {\n      setCurrentAccount(\"\");\n      console.log(error);\n    }\n\n    ;\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        setCurrentAccount(\"\");\n        alert(\"Get Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n      console.log(\"connected: \", accounts[0]);\n    } catch (error) {\n      setCurrentAccount(\"\");\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(ethereum.contactAddress, ethereum.contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"retrieved total wave count\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkWalletConnection();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(MainBody, {\n      account: currentAccount,\n      connectWallet: connectWallet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/components/app/index.tsx"],"names":["React","useState","useEffect","MainBody","styles","ethers","App","currentAccount","setCurrentAccount","checkWalletConnection","ethereum","window","accounts","request","method","length","console","log","account","error","connectWallet","alert","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contactAddress","contractABI","count","getTotalWaves","toNumber","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MainBody } from '../mainbody';\nimport styles from './index.module.scss';\nimport { ethers } from 'ethers';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState<string>(\"\")\n\n\tconst checkWalletConnection = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\treturn;\n\t\t\t} ;\n\t\n\t\t\tconst accounts = await ethereum.request({method: 'eth_accounts' });\n\n\t\t\tif (accounts.length === 0) { \n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\tconsole.log(\"No authorized account found or found more than one\");\n\t\t\t\treturn;\n\t\t\t};\n\n\t\t\tconst account = accounts[0];\n\t\t\tsetCurrentAccount(account);\n\t\t\tconsole.log(\"authorized account: \", account);\n\n\t\t} catch (error) {\n\t\t\tsetCurrentAccount(\"\");\n\t\t\tconsole.log(error);\n\t\t};\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\t\t\tif (!ethereum) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\talert(\"Get Metamask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t\tconsole.log(\"connected: \", accounts[0]);\n\t\t} catch (error) {\n\t\t\tsetCurrentAccount(\"\");\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst wave = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst wavePortalContract = new ethers.Contract(ethereum.contactAddress, ethereum.contractABI, signer);\n\n\t\t\t\tlet count = await wavePortalContract.getTotalWaves();\n\t\t\t\tconsole.log(\"retrieved total wave count\", count.toNumber());\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tcheckWalletConnection();\n\t}, [])\n\n\treturn(\n\t\t<div className={styles.container}>\n\t\t\t<MainBody account={currentAccount} connectWallet={connectWallet}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\nimport { nanoid } from 'nanoid';\nimport moment from 'moment';\nexport const createWaveTxn = async messageText => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const newWave = {\n        id: nanoid(),\n        walletId: signer.toString(),\n        messageText,\n        timestamp: moment().utc().format()\n      };\n      const waveTxn = await contract.sendWave(newWave.timestamp, newWave.messageText);\n      console.log('Mining... ', waveTxn.hash);\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n      return newWave;\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\nexport const getWaveCount = async () => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n    const count = await contract.getTotalWaves();\n    console.log('returned total waves count: ', count);\n    return count;\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/calvin/blockchain/wave-portal/src/service/index.ts"],"names":["ethers","CONTACT_ADDRESS","contractABI","nanoid","moment","createWaveTxn","messageText","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","undefined","newWave","id","walletId","toString","timestamp","utc","format","waveTxn","sendWave","console","log","hash","wait","error","getWaveCount","count","getTotalWaves"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAOC,WAAP,IAA+B;AAC1D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAoBC,MAA1B;AACA,UAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;AACA,UAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,QAAX,CAAoBd,eAApB,EAAqCC,WAAW,CAACc,GAAjD,EAAsDJ,MAAtD,CAAjB;;AAEA,QAAIE,QAAQ,KAAKG,SAAjB,EAA4B;AAC1B,YAAMC,OAAa,GAAG;AACpBC,QAAAA,EAAE,EAAEhB,MAAM,EADU;AAEpBiB,QAAAA,QAAQ,EAAER,MAAM,CAACS,QAAP,EAFU;AAGpBf,QAAAA,WAHoB;AAIpBgB,QAAAA,SAAS,EAAElB,MAAM,GAAGmB,GAAT,GAAeC,MAAf;AAJS,OAAtB;AAOA,YAAMC,OAAO,GAAG,MAAMX,QAAQ,CAACY,QAAT,CAAkBR,OAAO,CAACI,SAA1B,EAAqCJ,OAAO,CAACZ,WAA7C,CAAtB;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,OAAO,CAACI,IAAlC;AAEA,YAAMJ,OAAO,CAACK,IAAR,EAAN;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAO,CAACI,IAA/B;AAEA,aAAOX,OAAP;AACD;AACF,GAtBD,CAsBE,OAAOa,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA,WAAOd,SAAP;AACD;AACF,CA3BM;AA6BP,OAAO,MAAMe,YAAY,GAAG,YAAY;AACtC,MAAI;AACF,UAAM;AAAEzB,MAAAA;AAAF,QAAoBC,MAA1B;AACA,UAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;AACA,UAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,QAAX,CAAoBd,eAApB,EAAqCC,WAAW,CAACc,GAAjD,EAAsDJ,MAAtD,CAAjB;AAEA,UAAMqB,KAAK,GAAG,MAAMnB,QAAQ,CAACoB,aAAT,EAApB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CK,KAA5C;AACA,WAAOA,KAAP;AACD,GATD,CASE,OAAOF,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,CAbM","sourcesContent":["import { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\nimport { nanoid } from 'nanoid';\nimport moment from 'moment';\nimport { Wave } from '../model/wave';\n\nexport const createWaveTxn = async (messageText: string) => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const newWave: Wave = {\n        id: nanoid(),\n        walletId: signer.toString(),\n        messageText, \n        timestamp: moment().utc().format(),\n      }\n\n      const waveTxn = await contract.sendWave(newWave.timestamp, newWave.messageText);\n      console.log('Mining... ', waveTxn.hash);\n\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n\n      return newWave;\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const getWaveCount = async () => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    const count = await contract.getTotalWaves();\n    console.log('returned total waves count: ', count);\n    return count;\n  } catch (error) {\n    console.log(error);\n  }\n}"]},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["components/transaction/index.module.scss","components/app/index.module.scss","components/transaction/index.tsx","util/constants.ts","service/index.ts","components/mainbody/index.tsx","components/app/index.tsx","reportWebVitals.ts","index.tsx","components/mainbody/index.module.scss"],"names":["module","exports","Transaction","props","className","styles","container","txnContainer","nonMessageData","walletContainer","wave","address","timestampContainer","timestamp","messageContainer","message","CONTACT_ADDRESS","createWaveTxn","messageText","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","undefined","contract","Contract","contractABI","abi","gasLimit","waveTxn","console","log","hash","wait","getWaveCount","getTotalWaves","count","x","Number","getWaves","getAllWaves","waves","wavesCleaned","forEach","formattedTimeStamp","Date","toString","split","push","waver","listenForNewWaves","setWaves","on","from","error","initialWaves","MainBody","useState","setMessageText","totalWaves","setTotalWaves","handleTextChange","e","target","value","accountIsConnected","account","handleClick","handleGetAllWaves","retrieved","handleGetWaveCount","handleListenToNewWaves","useEffect","dataContainer","headerContainer","header","countContainer","bodyContainer","textContainer","textInputContainer","textInput","type","placeholder","onChange","buttonContainer","waveButton","onClick","buttonText","connectWallet","length","transactionsContainer","map","App","currentAccount","setCurrentAccount","checkWalletConnection","request","method","accounts","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4b17a46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"transaction_container__2ecn6\",\"txnContainer\":\"transaction_txnContainer__KYiTf\",\"nonMessageData\":\"transaction_nonMessageData__YZ0Ao\",\"walletContainer\":\"transaction_walletContainer__2midg\",\"timestampContainer\":\"transaction_timestampContainer__3PAu2\",\"messageContainer\":\"transaction_messageContainer__3KZ0C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2KuGn\"};","import React, { FC } from 'react';\nimport { Wave } from '../../model/wave';\nimport styles from './index.module.scss';\n\ninterface Props {\n  wave: Wave\n}\n\nexport const Transaction: FC<Props> = (props: Props) => (\n  <div className={styles.container}>\n    <div className={styles.txnContainer}>\n      <div className={styles.nonMessageData}>\n        <div className={styles.walletContainer}>\n          {props.wave.address}\n        </div>\n        <div className={styles.timestampContainer}>\n          {props.wave.timestamp}\n        </div>\n      </div>\n      <div className={styles.messageContainer}>\n        {props.wave.message}\n      </div>\n    </div>\n  </div>\n\n);\n","export const CONTACT_ADDRESS: string = \"0x728954a5ea8974f00cA8854185fb8004C69cF540\";\n","\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport { CONTACT_ADDRESS } from '../util/constants';\nimport contractABI from '../util/WavePortal.json';\nimport { Wave } from '../model/wave';\n\ndeclare let window: any;\n\nexport const createWaveTxn = async (messageText: string) => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    if (contract !== undefined) {\n      const waveTxn = await contract.wave(messageText, { gasLimit: 300000 });\n      console.log('Mining... ', waveTxn.hash);\n\n      await waveTxn.wait();\n      console.log('Mined--', waveTxn.hash);\n    } else {\n      console.log('contract was undefined');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getWaveCount = async (): Promise<number | undefined> => {\n  try {\n    const { ethereum }: any = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n    const count = await contract.getTotalWaves();\n    console.log('returned total waves count: ', count);\n\n    const x = Number(count);\n    console.log(x);\n    return count;\n\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const getWaves = async () => {\n  const { ethereum } = window;\n  try {\n    if (window.ethereum) { \n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n  \n      const waves = await contract.getAllWaves();\n      let wavesCleaned: Wave[] = [];\n\n      waves.forEach((wave: any) => {\n        const timestamp = new Date(wave.timestamp * 1000).toString()\n        const formattedTimeStamp = timestamp.split(' (')[0];\n\n        wavesCleaned.push({\n          address: wave.waver,\n          timestamp: formattedTimeStamp,\n          message: wave.message\n        });\n      });\n\n      console.log(wavesCleaned);\n      return wavesCleaned;\n    } else {\n      console.log('Ethereum object does not exist!');\n      return undefined;\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const listenForNewWaves = async (setWaves: React.Dispatch<React.SetStateAction<Wave[]>>) => {\n  console.log('listening for new waves!');\n  const { ethereum } = window;\n  try {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTACT_ADDRESS, contractABI.abi, signer);\n\n      contract.on('NewWave', async (from, timestamp, message) => {\n        console.log('NewWave', from, timestamp, message);\n\n        const waves = await contract.getAllWaves();\n        setWaves(waves);\n      });\n    } else {\n      console.log('Ethereum object does not exist!'); \n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { Wave } from '../../model/wave';\nimport { Transaction } from '../transaction';\nimport styles from './index.module.scss';\nimport { createWaveTxn, getWaves, getWaveCount, listenForNewWaves }  from '../../service';\n\nconst initialWaves: Wave[] = [];\n\ninterface Props {\n\taccount: any;\n\tconnectWallet: any;\n}\n\nexport const MainBody = (props: Props) => {\n\tconst [messageText, setMessageText] = useState<string>('');\n\tconst [waves, setWaves] = useState<Wave[]>(initialWaves);\n\tconst [totalWaves, setTotalWaves] = useState<number>(0);\n\n\tconst handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetMessageText(e.target.value);\n\t};\n\n\tconst accountIsConnected = (): Boolean => {\n\t\tif (props.account === \"\") {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tconst handleClick = async () => {\n\t\tif (!accountIsConnected) { return }\n\t\tif (messageText === '') { return }\n\t\tawait createWaveTxn(messageText);\n\t\tsetMessageText('');\n\t};\n\n\tconst handleGetAllWaves = async () => {\n\t\tif (!accountIsConnected) { return }\n\t\tconst retrieved = await getWaves();\n\t\tif (retrieved !== undefined) {\n\t\t\tsetWaves(retrieved);\n\t\t}\n\t};\n\n\tconst handleGetWaveCount = async () => {\n\t\tif (!accountIsConnected) { return }\n\t\tconst count = await getWaveCount();\n\t\tif (count !== undefined) {\n\t\t\tsetTotalWaves(count);\n\t\t}\n\t};\n\n\tconst handleListenToNewWaves = async () => {\n\t\tif (!accountIsConnected) { return }\n\t\tconst retrieved = await listenForNewWaves(setWaves);\n\t}\n\n\tuseEffect(() => {\n\t\thandleGetWaveCount();\n\t\thandleGetAllWaves();\n\t}, []);\n\n\tuseEffect(() => {\n\t\thandleListenToNewWaves();\n\t}, []);\n\n\tconst renderHeader = () => (\n\t\t<div className={styles.headerContainer}>\n\t\t\t<div className={styles.header}>Waveportal</div>\n\t\t</div>\n\t);\n\n\tconst renderConnectWalletButton = () => (\n\t\t<div className={styles.buttonContainer}>\n\t\t\t<div className={styles.waveButton} onClick={props.connectWallet}>\n\t\t\t\t<div className={styles.buttonText}>connect wallet</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderTextFieldAndWaveButton = () => (\n\t\t<div>\n\t\t\t<div className={styles.textInputContainer}>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.textInput}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={messageText}\n\t\t\t\t\tplaceholder=\"leave a message!\"\n\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className={styles.buttonContainer}>\n\t\t\t\t<div className={styles.waveButton} onClick={handleClick}>\n\t\t\t\t\t<div className={styles.buttonText}>wave</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tconst renderBody = () => (\n\t\t<div className={styles.bodyContainer}>\n\t\t\t<div className={styles.textContainer}>\n\t\t\t\tConnect your wallet and leave a message!\n\t\t\t</div>\n\t\t\t{!props.account ? renderConnectWalletButton() : renderTextFieldAndWaveButton()}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<div className={styles.dataContainer}>\n\t\t\t\t{renderHeader()}\n\t\t\t\t<div className={styles.countContainer}>\n\t\t\t\t\t<div>{`So far ${totalWaves} waves have been sent!`} </div>\n\t\t\t\t</div>\n\t\t\t\t{renderBody()}\n\t\t\t\t{waves.length !== 0 \n\t\t\t\t\t\t? <div className={styles.transactionsContainer}>\n\t\t\t\t\t\t\t\t{waves.map((wave: Wave) => \n\t\t\t\t\t\t\t\t\t<Transaction key={wave.timestamp} wave={wave}/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React, { useState, useEffect } from 'react';\nimport { MainBody } from '../mainbody';\nimport styles from './index.module.scss';\nimport { ethers } from 'ethers';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState<string>(\"\")\n\n\tconst checkWalletConnection = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\t\t\t\n\t\t\tif (!ethereum) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\treturn;\n\t\t\t};\n\t\n\t\t\tconst accounts = await ethereum.request({method: 'eth_accounts' });\n\t\t\tconsole.log('getaccounts');\n\t\t\tif (accounts.length === 0) { \n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t\treturn;\n\t\t\t} else if (accounts.length > 1) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\tconsole.log('more than one account found');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst account = accounts[0];\n\t\t\tsetCurrentAccount(account);\n\t\t\tconsole.log(\"authorized account: \", account);\n\n\t\t} catch (error) {\n\t\t\tsetCurrentAccount(\"\");\n\t\t\tconsole.log(error);\n\t\t};\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum }: any = window;\n\t\t\tif (!ethereum) {\n\t\t\t\tsetCurrentAccount(\"\");\n\t\t\t\talert(\"Get Metamask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t\tconsole.log(\"connected: \", accounts[0]);\n\t\t} catch (error) {\n\t\t\tsetCurrentAccount(\"\");\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tcheckWalletConnection();\n\t}, []);\n\n\treturn(\n\t\t<div className={styles.container}>\n\t\t\t<MainBody account={currentAccount} connectWallet={connectWallet}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport './styles/index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"mainbody_container__3Z1Uk\",\"dataContainer\":\"mainbody_dataContainer__A3_uc\",\"headerContainer\":\"mainbody_headerContainer__2yHNO\",\"header\":\"mainbody_header__2tsLS\",\"bodyContainer\":\"mainbody_bodyContainer__3Mqs-\",\"textContainer\":\"mainbody_textContainer__2RSyd\",\"textInputContainer\":\"mainbody_textInputContainer__2ddl5\",\"textInput\":\"mainbody_textInput__1FHFU\",\"buttonContainer\":\"mainbody_buttonContainer__3nZWz\",\"waveButton\":\"mainbody_waveButton__2gxVb\",\"countContainer\":\"mainbody_countContainer__2p1cV\",\"transactionsContainer\":\"mainbody_transactionsContainer__3wBp0\"};"],"sourceRoot":""}